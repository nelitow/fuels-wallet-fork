name: "Release"

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_VERSION: ""

jobs:
  check-commit:
    name: Decide if releases or create PR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      is_changeset_pr: ${{ steps.check-commit.outputs.is_changeset_pr }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: check-commit
        name: Check if this commit is a regular merge or a changeset PR merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "‚ú® Checking commit message to determine workflow path..."
          COMMIT_MSG=$(git log -1 --pretty=%B)
          FIRST_LINE=$(echo "$COMMIT_MSG" | head -n1)
          echo "üëÄ Commit first line: $FIRST_LINE"
          if [[ "$FIRST_LINE" == "ci(changesets): versioning packages"* ]]; then
            echo "üîç Found changeset versioning pattern, checking PR number..."
            PR_NUMBER=$(echo "$FIRST_LINE" | grep -o '#[0-9]\+' | head -n1 | tr -d '#')
            if [ -n "$PR_NUMBER" ]; then
              echo "üîÑ Found PR number: $PR_NUMBER, checking PR title..."
              PR_TITLE=$(gh pr view "$PR_NUMBER" --json title -q .title)
              echo "üìù PR title: $PR_TITLE"
              if [[ "$PR_TITLE" == "ci(changesets): versioning packages" ]]; then
                echo "‚úÖ This is a changeset PR merge, will proceed with publishing"
                echo "is_changeset_pr=true" >> "$GITHUB_OUTPUT"
                exit 0
              fi
            fi
          fi
          echo "‚ÑπÔ∏è This is a regular commit, will create/update changeset PR"
          echo "is_changeset_pr=false" >> "$GITHUB_OUTPUT"

  create-pr:
    name: Push changes to Changeset PR
    needs: check-commit
    if: needs.check-commit.outputs.is_changeset_pr == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Extract pnpm version from .tool-versions
        id: get_pnpm
        run: |
          echo "üîç Extracting pnpm version from .tool-versions..."
          PNPM_VERSION=$(grep '^pnpm' .tool-versions | awk '{print $2}')
          echo "üì¶ Found pnpm version: ${PNPM_VERSION}"
          echo "PNPM_VERSION=${PNPM_VERSION}" >> $GITHUB_ENV
      - uses: FuelLabs/github-actions/setups/node@master
        with:
          node-version: 20.11.0
          pnpm-version: ${{  env.PNPM_VERSION }}

      - name: Setup git user (for changelog step)
        run: |
          echo "üõ†Ô∏è Setting up git user for changelog generation..."
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create Changeset PR
        uses: changesets/action@v1
        with:
          commit: "ci(changesets): versioning packages"
          title: "ci(changesets): versioning packages"
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Release to NPM
    needs: check-commit
    if: needs.check-commit.outputs.is_changeset_pr == 'true'
    runs-on: ubuntu-latest
    environment: npm-deploy
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Extract pnpm version from .tool-versions
        id: get_pnpm
        run: |
          echo "üîç Extracting pnpm version from .tool-versions..."
          PNPM_VERSION=$(grep '^pnpm' .tool-versions | awk '{print $2}')
          echo "üì¶ Found pnpm version: ${PNPM_VERSION}"
          echo "PNPM_VERSION=${PNPM_VERSION}" >> $GITHUB_ENV
      - uses: FuelLabs/github-actions/setups/node@master
        with:
          node-version: 20.11.0
          pnpm-version: ${{  env.PNPM_VERSION }}
      - uses: FuelLabs/github-actions/setups/npm@master
        with:
          npm-token: ${{ secrets.NPM_TOKEN_WALLET }}

      - name: Bump and Collect Version
        run: |
          echo "üìã Starting version bump process..."
          # Backup changesets for release descriptions
          echo "üíæ Backing up changesets folder..."
          cp -r .changeset changesets-backup
          echo "üî¢ Running changeset version command..."
          pnpm changeset version
          echo "üè∑Ô∏è Collecting build version..."
          BUILD_VERSION=$(pnpm -s packages:version)
          echo "üìå Build version: ${BUILD_VERSION}"
          echo "BUILD_VERSION=${BUILD_VERSION}" >> $GITHUB_ENV
          echo "‚ôªÔ∏è Resetting changes to prepare for publishing..."
          git reset --hard
          # Restore changesets for release notes generation
          echo "üîÑ Restoring changesets for release notes generation..."
          mkdir -p .changeset
          cp -r changesets-backup/* .changeset/ || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Preview Release Description
        run: |
          echo "üìù Previewing what will be in the release description:"
          echo "=============================================="
          echo "üè∑Ô∏è Release version: ${BUILD_VERSION}"
          echo "üìÑ Changesets to be included:"
          for file in .changeset/*.md; do
            if [ -f "$file" ] && [ "$(basename "$file")" != "README.md" ]; then
              echo "-------------------------------------------"
              echo "üìå Changeset: $(basename "$file" .md)"
              # Extract the header (package names and bump types)
              sed -n '/^---$/,/^---$/p' "$file" | grep -v "^---$"
              echo ""
              # Extract the content (description)
              sed -n '/^---$/,/^---$/!p' "$file" | sed '1,2d'
            fi
          done
          echo "=============================================="

      - name: Build packages
        run: |
          echo "üî® Building library packages..."
          pnpm build:libs
          echo "‚úÖ Library packages built successfully!"

      - name: Build Bacon Wallet
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "üî® Building Fuel Wallet production version..."
          pnpm build:crx
          echo "‚úÖ Fuel Wallet built successfully!"
        env:
          ## increase node.js m memory limit for building
          ## with sourcemaps
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Build Bacon Wallet Development
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "üî® Building Fuel Wallet development version..."
          pnpm build:crx
          echo "‚úÖ Fuel Wallet development version built successfully!"
        env:
          VITE_CRX_RELEASE: false
          VITE_CRX_NAME: "Bacon Wallet Development"
          CRX_OUT: "dist-crx-dev"
          APP_VERSION_POSTFIX: "-development"
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Attach Bacon Wallet to release
        if: steps.changesets.outputs.published == 'true'
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ env.BUILD_VERSION }}
          files: |
            ./packages/app/dist/*.zip
