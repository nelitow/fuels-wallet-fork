name: "Release"

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_VERSION: ""

jobs:
  check-commit:
    name: Decide if releases or create PR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      is_changeset_pr: ${{ steps.check-commit.outputs.is_changeset_pr }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: check-commit
        name: Check if this commit is a regular merge or a changeset PR merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "✨ Checking commit message to determine workflow path..."
          COMMIT_MSG=$(git log -1 --pretty=%B)
          FIRST_LINE=$(echo "$COMMIT_MSG" | head -n1)
          echo "👀 Commit first line: $FIRST_LINE"
          if [[ "$FIRST_LINE" == "ci(changesets): versioning packages"* ]]; then
            echo "🔍 Found changeset versioning pattern, checking PR number..."
            PR_NUMBER=$(echo "$FIRST_LINE" | grep -o '#[0-9]\+' | head -n1 | tr -d '#')
            if [ -n "$PR_NUMBER" ]; then
              echo "🔄 Found PR number: $PR_NUMBER, checking PR title..."
              PR_TITLE=$(gh pr view "$PR_NUMBER" --json title -q .title)
              echo "📝 PR title: $PR_TITLE"
              if [[ "$PR_TITLE" == "ci(changesets): versioning packages" ]]; then
                echo "✅ This is a changeset PR merge, will proceed with publishing"
                echo "is_changeset_pr=true" >> "$GITHUB_OUTPUT"
                exit 0
              fi
            fi
          fi
          echo "ℹ️ This is a regular commit, will create/update changeset PR"
          echo "is_changeset_pr=false" >> "$GITHUB_OUTPUT"

  create-pr:
    name: Push changes to Changeset PR
    needs: check-commit
    if: needs.check-commit.outputs.is_changeset_pr == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Extract pnpm version from .tool-versions
        id: get_pnpm
        run: |
          echo "🔍 Extracting pnpm version from .tool-versions..."
          PNPM_VERSION=$(grep '^pnpm' .tool-versions | awk '{print $2}')
          echo "📦 Found pnpm version: ${PNPM_VERSION}"
          echo "PNPM_VERSION=${PNPM_VERSION}" >> $GITHUB_ENV
      - uses: FuelLabs/github-actions/setups/node@master
        with:
          node-version: 20.11.0
          pnpm-version: ${{  env.PNPM_VERSION }}

      - name: Setup git user (for changelog step)
        run: |
          echo "🛠️ Setting up git user for changelog generation..."
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create Changeset PR
        uses: changesets/action@v1
        with:
          commit: "ci(changesets): versioning packages"
          title: "ci(changesets): versioning packages"
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Release to NPM
    needs: check-commit
    if: needs.check-commit.outputs.is_changeset_pr == 'true'
    runs-on: ubuntu-latest
    environment: npm-deploy
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Extract pnpm version from .tool-versions
        id: get_pnpm
        run: |
          echo "🔍 Extracting pnpm version from .tool-versions..."
          PNPM_VERSION=$(grep '^pnpm' .tool-versions | awk '{print $2}')
          echo "📦 Found pnpm version: ${PNPM_VERSION}"
          echo "PNPM_VERSION=${PNPM_VERSION}" >> $GITHUB_ENV
      - uses: FuelLabs/github-actions/setups/node@master
        with:
          node-version: 20.11.0
          pnpm-version: ${{  env.PNPM_VERSION }}
      - uses: FuelLabs/github-actions/setups/npm@master
        with:
          npm-token: ${{ secrets.NPM_TOKEN_WALLET }}

      - name: Bump and Collect Version
        run: |
          echo "📋 Starting version bump process..."
          # Backup changesets for release descriptions
          echo "💾 Backing up changesets folder..."
          cp -r .changeset changesets-backup
          
          # Debug: Show changeset content
          echo "📄 Changeset content:"
          for file in .changeset/*.md; do
            if [ -f "$file" ] && [ "$(basename "$file")" != "README.md" ]; then
              echo "=== $(basename "$file") ==="
              cat "$file"
              echo ""
            fi
          done
          
          echo "🔢 Running changeset version command..."
          pnpm changeset version
          
          # Debug: Check if CHANGELOG files were created/updated
          echo "📝 Checking for CHANGELOG.md files:"
          find . -name "CHANGELOG.md" -type f | while read changelog; do
            echo "Found CHANGELOG: $changelog"
            echo "--- Recent entries ---"
            head -n 20 "$changelog"
            echo "---------------------"
          done
          
          echo "🏷️ Collecting build version..."
          BUILD_VERSION=$(pnpm -s packages:version)
          echo "📌 Build version: ${BUILD_VERSION}"
          echo "BUILD_VERSION=${BUILD_VERSION}" >> $GITHUB_ENV
          echo "♻️ Resetting changes to prepare for publishing..."
          git reset --hard
          # Restore changesets for release notes generation
          echo "🔄 Restoring changesets for release notes generation..."
          mkdir -p .changeset
          echo "📁 Created .changeset directory"
          cp -r changesets-backup/* .changeset/ || true
          echo "📋 Copied changeset files from backup"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Preview Release Description
        run: |
          echo "📝 Previewing what will be in the release description:"
          echo "=============================================="
          echo "🏷️ Release version: ${BUILD_VERSION}"
          echo "📄 Changesets to be included:"
          for file in .changeset/*.md; do
            if [ -f "$file" ] && [ "$(basename "$file")" != "README.md" ]; then
              echo "-------------------------------------------"
              echo "📌 Changeset: $(basename "$file" .md)"
              # Extract the header (package names and bump types)
              sed -n '/^---$/,/^---$/p' "$file" | grep -v "^---$"
              echo ""
              # Extract the content (description)
              sed -n '/^---$/,/^---$/!p' "$file" | sed '1,2d'
            fi
          done
          echo "=============================================="
          # Add debug output for the FuelLabs/changesets-action logic
          echo "📊 Debug: Content of .changeset directory:"
          ls -la .changeset/
          echo "📄 Debug: Content of a sample changeset file (if exists):"
          head -n 20 .changeset/*.md 2>/dev/null || echo "No changeset files found"

      - name: Build packages
        run: |
          echo "🔨 Building library packages..."
          pnpm build:libs
          echo "✅ Library packages built successfully!"

      # Always set the published flag before attempting NPM publish
      - name: Set published flag for testing
        id: set_published
        run: |
          # Use the manually parsed published status if available, otherwise default to true
          PUBLISHED="${{ steps.parse_published.outputs.has_published_packages || 'true' }}"
          echo "Setting published flag to $PUBLISHED for testing purposes..."
          echo "published=$PUBLISHED" >> $GITHUB_OUTPUT

      # Install tools needed for release notes generation
      - name: Install Release Notes Dependencies
        if: steps.set_published.outputs.published == 'true'
        run: |
          echo "📦 Installing dependencies for release notes generation..."
          sudo apt-get update -y
          sudo apt-get install -y jq
          
          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt-get update -y
            sudo apt-get install -y gh
          fi
          
          # Authenticate GitHub CLI
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # Continue-on-error ensures this doesn't stop our workflow if it fails
      - name: Publish to NPM
        id: changesets
        uses: FuelLabs/changesets-action@v2.0.0
        continue-on-error: true
        with:
          publish: pnpm changeset publish --tag next
          createGithubReleases: aggregate
          version: pnpm changeset version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN_WALLET }}
          DEBUG: "changesets:*"
          
      - name: Debug Published Outputs
        id: parse_published
        run: |
          echo "🔍 Debugging published packages output:"
          echo "✅ Published flag: ${{ steps.changesets.outputs.published }}"
          echo "📦 Published packages: ${{ steps.changesets.outputs.publishedPackages }}"
          
          echo "🔎 Checking for published success messages in logs"
          # Extract the actual published packages from the logs using the "New tag:" pattern
          STEP_OUTPUT="${{ toJSON(steps.changesets.outputs) }}"
          OUTPUT_LOG="${{ runner.temp }}/changesets-output.log"
          
          echo "$STEP_OUTPUT" > $OUTPUT_LOG
          
          # Create a file with all the logs
          GITHUB_STEP_SUMMARY="${{ runner.temp }}/workflow-logs.txt"
          env | grep "GITHUB_STEP_SUMMARY" || true > $GITHUB_STEP_SUMMARY
          
          # Check if there are any packages published at all
          if grep -q "New tag:" $GITHUB_STEP_SUMMARY; then
            echo "✅ Found packages with 'New tag:' markers in the logs"
            echo "has_published_packages=true" >> $GITHUB_OUTPUT
            
            # Extract package information
            PACKAGES_JSON="["
            FIRST=true
            while IFS= read -r line; do
              if [[ $line =~ New\ tag:\ \ ([^@]+)@([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                PACKAGE="${BASH_REMATCH[1]}"
                VERSION="${BASH_REMATCH[2]}"
                if [ "$FIRST" = true ]; then
                  FIRST=false
                else
                  PACKAGES_JSON+=","
                fi
                PACKAGES_JSON+="{\"name\":\"$PACKAGE\",\"version\":\"$VERSION\"}"
              fi
            done < <(grep "New tag:" $GITHUB_STEP_SUMMARY)
            PACKAGES_JSON+="]"
            
            echo "published_packages=$PACKAGES_JSON" >> $GITHUB_OUTPUT
            echo "📦 Parsed published packages: $PACKAGES_JSON"
          else
            echo "❌ No 'New tag:' markers found in the logs"
            echo "has_published_packages=false" >> $GITHUB_OUTPUT
            echo "published_packages=[]" >> $GITHUB_OUTPUT
          fi
          
          # Look for successful publish messages in npm logs
          grep "success packages published successfully" /home/runner/.npm/_logs/*.log 2>/dev/null || echo "No success message found in npm logs"

      - name: Build Bacon Wallet
        # Only use our forced flag since it's guaranteed to be set
        if: steps.set_published.outputs.published == 'true'
        run: |
          echo "🔨 Building Fuel Wallet production version..."
          pnpm build:crx
          echo "✅ Fuel Wallet built successfully!"
        env:
          ## increase node.js m memory limit for building
          ## with sourcemaps
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Build Bacon Wallet Development
        if: steps.set_published.outputs.published == 'true'
        run: |
          echo "🔨 Building Fuel Wallet development version..."
          pnpm build:crx
          echo "✅ Fuel Wallet development version built successfully!"
        env:
          VITE_CRX_RELEASE: false
          VITE_CRX_NAME: "Bacon Wallet Development"
          CRX_OUT: "dist-crx-dev"
          APP_VERSION_POSTFIX: "-development"
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Upload Production artifacts to Sentry
        if: steps.set_published.outputs.published == 'true'
        continue-on-error: true
        run: |
          echo "📤 Uploading production sourcemaps to Sentry for version ${{ env.BUILD_VERSION }}..."
          pnpm sentry-cli sourcemaps inject --release ${{ env.BUILD_VERSION }} ./dist-crx
          pnpm sentry-cli sourcemaps upload --release ${{ env.BUILD_VERSION }} ./dist-crx
          echo "✅ Production sourcemaps uploaded to Sentry!"
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
        working-directory: ./packages/app

      - name: Upload Development artifacts to Sentry
        if: steps.set_published.outputs.published == 'true'
        continue-on-error: true
        run: |
          echo "📤 Uploading development sourcemaps to Sentry for version ${{ env.BUILD_VERSION }}..."
          pnpm sentry-cli sourcemaps inject --release ${{ env.BUILD_VERSION }} ./dist-crx-dev
          pnpm sentry-cli sourcemaps upload --release ${{ env.BUILD_VERSION }} ./dist-crx-dev
          echo "✅ Development sourcemaps uploaded to Sentry!"
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
        working-directory: ./packages/app

      - name: Attach Bacon Wallet to release
        if: steps.set_published.outputs.published == 'true'
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ env.BUILD_VERSION }}
          files: |
            ./packages/app/dist/*.zip
            
      - name: Generate and Publish Enhanced Release Notes
        if: steps.set_published.outputs.published == 'true'
        run: |
          echo "📝 Generating enhanced release notes..."
          
          # Get the parsed package information
          PUBLISHED_PACKAGES='${{ steps.parse_published.outputs.published_packages || '[]' }}'
          
          # Create a release body with proper newlines (using actual newlines, not \n escape sequences)
          # This is the key fix - use actual newlines in the heredoc instead of \n escape sequences
          cat > release_notes.md << 'EOL'
          ## Bacon Wallet v${{ env.BUILD_VERSION }}

          ### Packages Published

          EOL
          
          # Use jq to parse the published packages JSON if it exists
          if [ -n "$PUBLISHED_PACKAGES" ] && [ "$PUBLISHED_PACKAGES" != "[]" ]; then
            echo "Using parsed package information from logs"
            
            # Get the number of packages
            NUM_PACKAGES=$(echo $PUBLISHED_PACKAGES | jq length)
            echo "Found $NUM_PACKAGES published packages"
            
            # Process each package
            for i in $(seq 0 $(($NUM_PACKAGES - 1))); do
              PKG_NAME=$(echo $PUBLISHED_PACKAGES | jq -r ".[$i].name")
              PKG_VERSION=$(echo $PUBLISHED_PACKAGES | jq -r ".[$i].version")
              
              echo "- **${PKG_NAME}@${PKG_VERSION}**" >> release_notes.md
              
              # Try to find the CHANGELOG for this package
              CHANGELOG=""
              
              # First try to find it by package name
              if [ -f "./packages/$PKG_NAME/CHANGELOG.md" ]; then
                CHANGELOG="./packages/$PKG_NAME/CHANGELOG.md"
              else
                # Search in all packages directories
                FOUND_CHANGELOG=$(find ./packages -name "CHANGELOG.md" -type f | grep -i "$PKG_NAME" | head -n 1)
                if [ -n "$FOUND_CHANGELOG" ]; then
                  CHANGELOG="$FOUND_CHANGELOG"
                fi
              fi
              
              # Extract recent entries from CHANGELOG if found
              if [ -n "$CHANGELOG" ] && [ -f "$CHANGELOG" ]; then
                echo "Found CHANGELOG for $PKG_NAME at $CHANGELOG"
                RECENT_ENTRY=$(awk 'BEGIN{inEntry=0} /^## / {if(inEntry) exit; inEntry=1} inEntry {print}' "$CHANGELOG" | head -n 20)
                if [ -n "$RECENT_ENTRY" ]; then
                  echo "  $RECENT_ENTRY" >> release_notes.md
                  echo "" >> release_notes.md
                else
                  echo "  No recent entries found in CHANGELOG." >> release_notes.md
                  echo "" >> release_notes.md
                fi
              else
                echo "  *(No CHANGELOG found)*" >> release_notes.md
                echo "" >> release_notes.md
              fi
            done
          else
            # Fallback to scanning all CHANGELOGs
            echo "No parsed package information found, falling back to CHANGELOG scan"
            find ./packages -name "CHANGELOG.md" -type f | while read changelog; do
              PKG_NAME=$(basename $(dirname "$changelog"))
              echo "- **$PKG_NAME**" >> release_notes.md
              # Get the most recent entry from the changelog
              RECENT_ENTRY=$(awk 'BEGIN{inEntry=0} /^## / {if(inEntry) exit; inEntry=1} inEntry {print}' "$changelog" | head -n 20)
              if [ -n "$RECENT_ENTRY" ]; then
                echo "  $RECENT_ENTRY" >> release_notes.md
                echo "" >> release_notes.md
              else
                echo "  No recent entries found in CHANGELOG." >> release_notes.md
                echo "" >> release_notes.md
              fi
            done
          fi
          
          echo "📤 Publishing enhanced release notes to GitHub..."
          
          # Display the content we're about to publish (for debugging)
          echo "Release notes content:"
          cat release_notes.md
          
          # Use the release notes file directly with gh CLI
          gh release view v${{ env.BUILD_VERSION }} > /dev/null 2>&1
          if [ $? -eq 0 ]; then
            # Update existing release
            gh release edit v${{ env.BUILD_VERSION }} --notes-file release_notes.md
          else
            # Create new release
            gh release create v${{ env.BUILD_VERSION }} --notes-file release_notes.md --title "Bacon Wallet v${{ env.BUILD_VERSION }}"
          fi
          
          echo "✅ Enhanced release notes published successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
